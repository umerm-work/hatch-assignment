// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateTodo struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Priority    int    `json:"priority"`
}

type RemoveTodo struct {
	ID int `json:"id"`
}

type Todo struct {
	ID          int     `json:"id"`
	Title       string  `json:"title"`
	Description string  `json:"description"`
	Priority    int     `json:"priority"`
	CreatedAt   *string `json:"createdAt"`
}

type UpdateTodo struct {
	ID          int    `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Priority    int    `json:"priority"`
}

type OrderOptions string

const (
	OrderOptionsAsc  OrderOptions = "asc"
	OrderOptionsDesc OrderOptions = "desc"
)

var AllOrderOptions = []OrderOptions{
	OrderOptionsAsc,
	OrderOptionsDesc,
}

func (e OrderOptions) IsValid() bool {
	switch e {
	case OrderOptionsAsc, OrderOptionsDesc:
		return true
	}
	return false
}

func (e OrderOptions) String() string {
	return string(e)
}

func (e *OrderOptions) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderOptions(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderOptions", str)
	}
	return nil
}

func (e OrderOptions) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOptions string

const (
	SortOptionsCreatedAt SortOptions = "createdAt"
	SortOptionsPriority  SortOptions = "priority"
)

var AllSortOptions = []SortOptions{
	SortOptionsCreatedAt,
	SortOptionsPriority,
}

func (e SortOptions) IsValid() bool {
	switch e {
	case SortOptionsCreatedAt, SortOptionsPriority:
		return true
	}
	return false
}

func (e SortOptions) String() string {
	return string(e)
}

func (e *SortOptions) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOptions(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOptions", str)
	}
	return nil
}

func (e SortOptions) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
